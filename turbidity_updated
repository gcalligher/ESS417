/*
Automated Coastline Detection and Extraction using Google Earth Engine

This script shows how to detect Land-Water Edge from Landsat Images
and process the results to extract the coastline

This work is based on several previous works as follows.

1. Canny Edge detector and Otsu thresholding by Gennadii Donchyts
   http://www.mdpi.com/2072-4292/8/5/386
2. Coastline Extraction Script by Dhritiraj Sengupta
   https://doi.org/10.1016/j.scitotenv.2020.139290

This work is licensed under the terms of the MIT license.  
For a copy, see https://opensource.org/licenses/MIT

Please give credit as below if you use the code in your work.
Code by Ujaval Gandhi, www.spatialthoughts.com
*/

// For running the script on your AOI, delete the `geometry` import
// and draw a polygon over the desired region.

// Define parameters
var startDate = ee.Date('2020-01-01');
var endDate = startDate.advance(1, 'year');
// Export resolution in meters is at which the coastline will
// be vectorized.
// Higher resolution (such as 10) will give smooother results
var exportResolutionMeters = 30;
// We need a threshold in meters to remove inland waterbodies
// and coastal islands. If you have a large waterbody closeA// to the coastline, set this higher.
var waterbodySizeMeters = 2000;
var islandSizeMeters = 1000;
var geometry  = ee.Geometry.Polygon([
  [127.37971060648161, -1.4974249598476264],
  [127.48648398294645, -1.4974249598476264],
  [127.48648398294645, -1.4274099351099296],
  [127.37971060648161, -1.4274099351099296]]);
// *** Important ***
// While running the code below, you may you may get tile or memory errors.
// This simply means you can't visualize the results interactively
// Ignore the errors and run the export to see the results in your Drive.

// Select Landsat 8 images over the interest area

var collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filter(ee.Filter.date(startDate, endDate))
  .filter(ee.Filter.bounds(geometry));

// Apply cloud mask
var maskL8sr = function(image) {
  var qaMask = image.select('QA_PIXEL')
    .bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.')
    .multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*')
    .multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones
  // and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
};
var collection = collection.map(maskL8sr);

// Select and Rename Bands
var collection = collection.select(
  ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
  ['blue',  'green', 'red',   'nir',   'swir1', 'swir2']
);

// Create a median composite and clip
var composite = collection.median().clip(geometry);


var rgbVis = {
  bands: ['red', 'green', 'blue'],
  min: 0.0, 
  max: 0.3
};
Map.addLayer(composite, rgbVis, 'Composite Image');

// Uncomment the lines below for smoothing the output.
// var proj = ee.Image(collection.first()).projection()
// composite = composite
//  .setDefaultProjection(proj).resample('bicubic')

// Code to compute AWEI and detect water using Otsu thresholding
var detectWater = function(image) {
  var awei = image.expression(
    '4 * (GREEN - SWIR1) - (0.25 * NIR + 2.75 * SWIR2)', {
      'GREEN': image.select('green'),
      'NIR': image.select('nir'),
      'SWIR1': image.select('swir1'),
      'SWIR2': image.select('swir2'),
  }).rename('awei');
  
  // Otsu Thresholding
  var thresholding = require('users/gena/packages:thresholding');
  var scale = 100;
  var bounds = geometry;
  var cannyThreshold = 0.7;
  var cannySigma = 1;
  var minValue = -0.2;
  var th = thresholding.computeThresholdUsingOtsu(
    awei, scale, bounds, cannyThreshold, cannySigma, minValue);
  // Create a Land-Water Image using Otsu Threshold
  // You can replace th with a manual threshold if
  // Otsu results are not satisfactory
  var water = awei.gt(th).rename('water');
  
  return water;
};

var water = detectWater(composite);
var waterVis = {min:0, max:1, palette: ['white', 'blue']};
Map.addLayer(water, waterVis, 'All Water');

// This function takes a binary Land-Water image and
// removes inland water and small islands
function removeInlandWaterAndIslands(waterImage) {
  // reduceConnectedComponents expects an interger image
  waterImage = waterImage.int();
  
  // Define neighborhood based on user parameters
  var connectedPixelsLand = ee.Number(waterbodySizeMeters)
    .divide(exportResolutionMeters).int();
    
  var connectedPixelsWater = ee.Number(islandSizeMeters)
    .divide(exportResolutionMeters).int();

  // Remove inland water
  var landFilled = waterImage.addBands(waterImage)
   .reduceConnectedComponents(
     ee.Reducer.median(), 'water', connectedPixelsLand)
   .unmask(99).eq(99).and(waterImage.neq(0));
  
  // Remove small islands  
  var waterFilled = landFilled.addBands(landFilled)
    .reduceConnectedComponents(
      ee.Reducer.median(), 'water_1', connectedPixelsWater)
    .unmask(99).eq(99).and(landFilled.neq(1));    
  
  // Land-Water Boundary
  return waterFilled;
}
var landWaterBoundary = removeInlandWaterAndIslands(water);
var landWaterBoundaryVis = {
  min:0,
  max:1,
  palette: ['blue', 'white']
};

Map.addLayer(landWaterBoundary, landWaterBoundaryVis,
  'Land-Water Boundary (Raster)');

// Convert the coastline image to vector
var vectors = ee.Image(landWaterBoundary).selfMask()
  .reduceToVectors({
    geometry: geometry,
    scale: exportResolutionMeters,
    eightConnected: true,
    maxPixels: 1e10,
    tileScale: 16
  });

Map.addLayer(vectors, {color: 'blue'},
  'Land-Water Boundary (Vector)');
  
// This function takes vectorized polygons and 
// extracts a polyline
var simplifyAndExtractCoastline = function(vectors){
  // Simplify vectors
  var processedVectors = vectors.map(function(f) {
    var coords = f.geometry()
      .simplify({maxError: exportResolutionMeters})
      .coordinates();
    
    // Buffer the geometry by a pixel to avoid rasterizing
    // the boundary polygon
    var bufferDistance = ee.Number(
      exportResolutionMeters).multiply(-1);
    return f
      .setGeometry(
        ee.Geometry.MultiLineString(coords)
          .intersection(geometry.buffer(bufferDistance)));
  });
  return processedVectors;
};

var coastlineVector = simplifyAndExtractCoastline(vectors);
Map.addLayer(coastlineVector, {color: 'red'},
  'Coastline (Vector)');
Map.centerObject(geometry, 12);

// Exports
// Exports can run for longer time and have more resources
// If any of your layers time-out or give tile errors,
// Run the exports instead
Export.table.toDrive({
  collection: coastlineVector,
  description: 'Extracted_Coastline_Vector',
  folder: 'earthengine',
  fileNamePrefix: 'coastline',
  fileFormat: 'SHP'});

Export.image.toDrive({
  image: landWaterBoundary,
  description: 'Extracted_Land_Water_boundary_Raster',
  folder: 'earthengine',
  fileNamePrefix: 'land_water_boundary_raster',
  region: geometry,
  scale: exportResolutionMeters,
  maxPixels: 1e10});
  
Export.image.toDrive({
  image: composite,
  description: 'Composite',
  folder: 'earthengine',
  fileNamePrefix: 'composite',
  region: geometry,
  scale: exportResolutionMeters,
  maxPixels: 1e10});
  
  var buffered = coastlineVector.map(function(f) {
  return f.buffer(200, 100); // Note that the errorMargin is set to 100.
});

Map.addLayer(buffered, {color: '800080'}, 'buffer');
Map.centerObject(geometry);

// Import Sentinel-2 Surface Reflectance Harmonized image collection
var sen = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
    // Select bands for near-infrared (B8), red (B4), green (B3), and blue (B2)
    .select(['B8', 'B4', 'B3', 'B2'])
    // Filter images to only include those from 2020
    .filterDate('2020-01-01', '2020-12-31')
    // Filter the images by the defined geometry area
    .filterBounds(geometry)
    // Filter for images with less than 10% cloud cover
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))
    // Take the median value of each pixel to reduce noise/clouds, and scale reflectance
    .median().multiply(0.0001);

// Add the Sentinel-2 composite to the map in false color (NIR, red, green) but keep it hidden (false)
Map.addLayer(sen.clip(geometry), {bands: ['B8', 'B4', 'B3']}, 'false color', false);

// Calculate the Normalized Difference Water Index (NDWI) using green (B3) and NIR (B8) bands
var ndwi = sen.normalizedDifference(['B3', 'B8']).rename('ndwi');

// Add the NDWI layer to the map but keep it hidden (false)
Map.addLayer(ndwi.clip(geometry), [], 'ndwi', false);

// Display a histogram of NDWI values within the defined geometry area
print(
  ui.Chart.image.histogram(ndwi, geometry, 100)
);

// Create a threshold mask to isolate areas where NDWI > 0.1
var thr = ndwi.gt(0.1);

// Add the threshold mask as a layer (shows true where NDWI > 0.1) but keep it hidden
Map.addLayer(thr.clip(geometry), [], 'thr', false);

// Apply the threshold mask to the Sentinel-2 data to mask out areas below the NDWI threshold
var sen_mask = sen.updateMask(thr);

// Add the masked Sentinel-2 data to the map, keeping it hidden
Map.addLayer(sen_mask.clip(geometry), [], 'sen_mask', false);

// Calculate the Normalized Difference Turbidity Index (NDTI) using red (B4) and green (B3) bands
var ndti = sen_mask.normalizedDifference(['B4', 'B3']).rename('ndti');

// Add the NDTI layer to the map, with colors indicating turbidity intensity, and make it visible
Map.addLayer(ndti.clip(geometry), {
  palette: ['blue', 'green', 'yellow', 'orange', 'red']
}, 'ndti', true);

// Convert the buffered region to an image mask
var bufferedMask = ee.Image.constant(1).clip(buffered).mask();

// Apply the inverse of the buffered mask to the NDTI layer to exclude the buffered area
var difference = ndti.updateMask(bufferedMask.not());

// Add the "difference" layer to the map to visualize the NDTI with the buffered area removed
Map.addLayer(difference.clip(geometry), {
  palette: ['blue', 'green', 'yellow', 'orange', 'red']
}, 'difference');

// Export the "difference" image to Google Drive
Export.image.toDrive({
  image: difference,
  description: 'Difference_NDTI_Without_Buffered_Region',
  folder: 'earthengine',
  fileNamePrefix: 'difference_ndti',
  region: geometry,
  scale: exportResolutionMeters,
  maxPixels: 1e10
});
// Create the legend title
var legendTitle = ui.Label({
  value: 'Turbidity Levels (NDTI)',
  style: {
    fontWeight: 'bold',
    fontSize: '16px',
    margin: '0 0 4px 0',
    padding: '0'
  }
});

// Define colors and labels for the legend (adjust as needed)
var legendColors = ['blue', 'green', 'yellow', 'orange', 'red'];
var legendLabels = ['Low Turbidity', 'Moderate-Low Turbidity', 'Moderate Turbidity', 'Moderate-High Turbidity', 'High Turbidity'];

// Create the legend panel and add the title
var legendPanel = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
legendPanel.add(legendTitle);

// Function to create a color box with label for each turbidity level
var makeLegendRow = function(color, label) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: label,
    style: { margin: '0 0 4px 6px' }
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

// Add each color box with its corresponding label to the legend panel
for (var i = 0; i < legendColors.length; i++) {
  legendPanel.add(makeLegendRow(legendColors[i], legendLabels[i]));
}

// Add the legend panel to the map
Map.add(legendPanel);





